#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'typekit'
require 'readline'
require 'optparse'
require 'json'

class Controller
  ACTIONS = %w{index show create update delete}
  KEYWORDS = %w{families kits libraries published publish}

  def initialize(options)
    @client = Typekit::Client.new(options)
  end

  def process(command)
    action, path, parameters = parse(command)
    print @client.process(action, path, parameters)
  rescue Exception => e
    puts e
  end

  def help
    puts <<-HELP
Usage: <action> <resource> [parameters]

    <action>        index, show, create, update, or delete
    <resource>      a list separated by whitespaces
    [parameters]    a JSON-encoded hash (optional)

Examples:
    index kits
    show kits bas4cfe families vcsm
    show families vcsm i9
    show libraries trial { "page": 10, "per_page": 5 }
    create kits { "name": "Megakit", "domains": "localhost" }
    update kits bas4cfe { "name": "Ultrakit" }
    delete kits bas4cfe
HELP
  end

  protected

  def print(output)
    puts JSON.pretty_generate(output)
  rescue JSON::GeneratorError
    puts output.to_s # neither hash nor array
  end

  def parse(command)
    parameters = extract_parameters!(command)

    chunks = command.split(/\s+/).compact.reject(&:empty?)
    action, path = chunks[0], chunks[1..-1]

    raise 'Missing action name' if action.nil?
    raise 'Invalid action name' unless ACTIONS.include?(action)
    raise 'Missing resource name' if path.empty?

    [ action, path, parameters ]
  end

  def extract_parameters!(command)
    if command =~ /(?<parameters>{.*})\s*$/
      parameters = JSON.parse(Regexp.last_match(:parameters))
      raise unless parameters.is_a?(Hash)
      command.gsub!(/{.*}/, '')
      parameters
    else
      {}
    end
  rescue
    raise 'Invalid parameters'
  end
end

options = {}

parser = OptionParser.new do |o|
  o.banner = 'Usage: typekit-client [options] [command]'

  o.separator ''
  o.separator 'Required options:'

  o.on('-t', '--token TOKEN', 'Set the API token') do |value|
    options[:token] = value
  end

  o.separator ''
  o.separator 'Other options:'

  o.on_tail('-h', '--help', 'Show this message') do
    raise
  end
end

begin
  parser.parse!
rescue
  puts parser
  exit
end

unless options[:token]
  puts <<-MESSAGE
You have not specified your API token. Try generating one here:

https://typekit.com/account/tokens

Then run:

$ typekit-client -t YOUR_TOKEN_GOES_HERE
  MESSAGE
  exit
end

begin
  controller = Controller.new(options)
rescue Exception => e
  puts e
  exit
end

unless ARGV.empty?
  controller.process(ARGV.join(' '))
  exit
end

puts %{Type 'help' for help and 'exit' to exit.}

COMMANDS = Controller::ACTIONS + Controller::KEYWORDS + %w{help exit}
Readline.completion_proc = proc do |input|
  COMMANDS.grep(/^#{ Regexp.escape(input) }/)
end

loop do
  begin
    command = Readline.readline('> ', true)
    if command.nil? # ^D
      puts
      next
    end

    command.strip!
    next if command.empty?

    case command
    when 'exit'
      break
    when 'help'
      controller.help
    else
      controller.process(command)
    end
  rescue Interrupt
    break
  end
end

puts 'Bye.'

# vim: set ft=ruby
